security:
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    providers:
        app_user_provider:
            entity:
                class: App\Entity\Admin
                property: email
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        login:
            pattern: ^/api/login
            stateless: true
            json_login:
                check_path: /api/login_check
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure
        main:
            pattern: ^/api
            lazy: true
            provider: app_user_provider
            stateless: true
            jwt: ~
    access_control:
        - { path: ^/api/login, roles: PUBLIC ACCESS }
        - { path: ^/api, roles: ROLE_ADMIN }

# when@test:
#     security:
#         password_hashers:
#             # By default, password hashers are resource intensive and take time. This is
#             # important to generate secure password hashes. In tests however, secure hashes
#             # are not important, waste resources and increase test times. The following
#             # reduces the work factor to the lowest possible values.
#             Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
#                 algorithm: auto
#                 cost: 4 # Lowest possible value for bcrypt
#                 time_cost: 3 # Lowest possible value for argon
#                 memory_cost: 10 # Lowest possible value for argon
